import scala.io.Source
import scala.collection.mutable.TreeMap
import collection.immutable.Stack

/**
  *  A quick script I wrote to determine number of occurrences of each word
  *  output by bulk_extractor.
  */
  
object StringsHistogram {

  def main( args: Array[String] ): Unit = {
    val fileName = "words.txt"

    val image: Vector[String] = importStrings(fileName)
    val histogramMap = countStrings(image)
    val histogram = makeHistogram(histogramMap)

    histogram.foreach(println)
  }

  def importStrings(imageName: String): Vector[String] = {
    Source.fromFile(imageName)
      .getLines
      .map(_.trim)
      .toVector
  }

  /** In Scala, when a String with a matching key is added, the prior is deleted. */
  def countStrings(vec: Vector[String]): TreeMap[String, Int] = {

    val onesTuple: Vector[(String, Int)] = vec.sorted.map(x => (x.toLowerCase(), 1))

    var treeHisto: TreeMap[String, Int] = TreeMap[String, Int]()

    var i = 0

    while(i < vec.size){

      if(vec(i) == vec(i - 1)){
        treeHisto += (onesTuple(i)._1 -> (onesTuple(i)._2 + 1))
      }
      else{
        treeHisto += onesTuple(i)
      }
      i = i + 1
    } // END while

    return treeHisto
  } // END countStrings()

  def makeHistogram(tree: TreeMap[String, Int]): Vector[String] ={

    /** Supposedly Stacks are better than ArrayBuffers at dealing w/ large data structures */
    var histoStack = Stack[String]()

    for((key, value) <- tree){

      histoStack += s"$value - $key"

    } // END for loop
    val histoVector = histoStack.toVector
    val sortedHistogram = histoVector.sorted

    return sortedHistogram
  } // END makeHistogram()


} // END StringsHistogram
